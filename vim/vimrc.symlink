" Section: Plugins

call plug#begin()
Plug 'fatih/vim-go', { 'tag': '*', 'do': ':GoUpdateBinaries' }
Plug 'godlygeek/tabular'
Plug 'hashivim/vim-hashicorp-tools'
Plug 'morhetz/gruvbox'
Plug 'natebosch/vim-lsc'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'sainnhe/gruvbox-material'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
call plug#end()

" Section: Bootstrap

set nocompatible
filetype plugin indent on

set modeline
set nomodelineexpr

" Section: Displaying text

set lazyredraw         " Don't update screen during macro/script execution
set encoding=utf-8     " Set default encoding to UTF-8
set ttyfast

set display+=lastline  " Alwary try to show a paragraph's last line
set scrolloff=1        " The number of screen lines to keep above/below cursor
set sidescrolloff=5    " Screen cols to keep to the left/right of the cursor

" Section: Windows

set laststatus=2     " Alway display the statusbar
set showtabline=2
set statusline=[%n]\ %<%.99f\ %y%h%w%m%r%=%-14.(%l,%c%V%)\ %P

set hidden           " Possibility to have more than one unsaved
                     " buffers.
set number           " Show line numbers
set splitright       " Split vertical windows right to the current
set splitbelow       " Split horizontal windows below to the current
set cursorline       " Highlight the line under the cursor
set nocursorcolumn   " Speed up syntax highlighting

" Always put the quickfix window at the bottom
augroup quickfix
  autocmd!
  autocmd FileType qf wincmd J
  autocmd FileType qf setlocal wrap
augroup END

" Remove current line highlight in unfocused window
au VimEnter,WinEnter,BufWinEnter,FocusGained,CmdwinEnter * set cursorline
au WinLeave,FocusLost,CmdwinLeave * set nocursorline

" Section: Messages and info

set confirm    " Display confirmation dialog when closing an unsaved file
set showcmd    " Show me what I'm typing
set visualbell " Show me, don't bleep

" Section: Editing text and indent

set complete-=i                " Limit files searched for auto-complete
set backspace=indent,eol,start " Proper backspace behaviour.
set showmatch                  " Show matching brackets by flickering
set virtualedit=block

set shiftround                 " Round indentation to nearest multile of 'sw'
set smarttab                   " Insert 'ts' spaces when <Tab> is pressed
set autoindent                 " Minimal automatic indent for any filetype

set completeopt=menu,menuone,noinsert,noselect

set clipboard^=unnamed
set clipboard^=unnamedplus

" Section: Folding and comments


" Section: Maps

" The leader
let mapleader = ','

" Close all but the current one
nnoremap <leader>o :only<CR>

" Enter automatically into the files directory
autocmd BufEnter * silent! lcd %:p:h

" Automatically resize screens to be equally the same
autocmd VimResized * wincmd =

" Center the screen
nnoremap <space> zz

" Remove search highlight
function! s:clear_highlight()
  let @/ = ""
  cal go#guru#ClearSameIds()
endfunction
nnoremap <silent> <leader><space> :<C-u>call <SID>clear_highlight()<CR>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Center on line when jumping between search results
nnoremap n nzzzv
nnoremap N Nzzzv

" Section: Reading and writing files

set fileformats=unix,dos,mac       " Prefer Unix over Windows over OS 9 formats
set autowrite                      " Automatically save before :next, :make etc.
set autoread                       " Automatically reread changed files without
                                   " asking
set noswapfile                     " Don't use swapfile
set nobackup                       " Don't create annoying backup files

if has('persistent_undo')
  set undofile
  set undodir=~/.cache/vim
endif

" Remove trailing whitespace on save
autocmd! BufWritePre * :%s/\s\+$//e

" Section: Command line editing

set wildmenu                      " Command-line completion.

" Section: Highlighting

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

syntax enable

" set termguicolors
set background=dark
colorscheme gruvbox-material

highlight clear CursorLine
highlight CursorLineNR cterm=bold
augroup aug_cursorline
  autocmd! ColorScheme * highlight clear CursorLine
  autocmd! ColorScheme * highlight CursorLineNR cterm=bold
augroup END

" Section: Filetype settings

augroup filetype_settings
	autocmd!
	autocmd FileType go
		  \ setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd FileType yaml,json
      \ setlocal expandtab tabstop=2 shiftwidth=2
	autocmd FileType sh,zsh,csh,tcsh
      \ setlocal formatoptions-=t|
      \ setlocal expandtab tabstop=4 shiftwidth=4
	autocmd FileType liquid,markdown,text,txt
      \ setlocal shiftwidth=78 linebreak keywordprg=dict
	autocmd FileType vim
      \ setlocal keywordprg=:help foldmethod=expr|
      \ setlocal foldexpr=getline(v:lnum)=~'^\"\ Section:'?'>1':'='|
      \ setlocal expandtab tabstop=2 shiftwidth=2
augroup END

" Section: Plugins

" netrw

let g:netrw_liststyle = 3
let g:netrw_winsize=20
let g:netrw_localrmdir='rm -r'

nnoremap <leader>n :Lexplore<CR>

" fugitive

vnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gb :Gblame<CR>

" vim-lsp

if executable('gopls')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'gopls',
      \ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
      \ 'whitelist': ['go'],
      \ })
  autocmd BufWritePre *.go LspDocumentFormatSync
endif

let g:lsp_signs_enabled = 1             " enable signs
let g:lsp_diagnostics_echo_cursor = 1   " enable echo under cursor when in normal mode
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
let g:lsp_highlight_references_enabled = 1

augroup filetype_lsp_settings
  autocmd!

  " Jumps
  autocmd FileType go nmap <leader>gd <plug>(lsp-definition)
  autocmd FileType go nmap <leader>gt <plug>(lsp-type-definition)

  " The commands will populate the quickfix window
  autocmd FileType go nmap <leader>gr <plug>(lsp-references)
  autocmd FileType go nmap <leader>gi <plug>(lsp-implementation)

  " Rename
  autocmd FileType go nmap <leader>gR <plug>(lsp-rename)
augroup END

let g:asyncomplete_auto_popup = 0

function! s:check_back_space() abort
  let col=col('.') - 1
  return !col || getline('.')[col - 1] =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" vim-go

let g:go_def_mapping_enabled = 0
let g:go_info_mode = 'gopls'

let g:go_fmt_fail_silently = 1
let g:go_fmt_command = 'goimports'
let g:go_debug_windows = {
    \ 'vars': 'leftabove 35vnew',
    \ 'stack': 'botright 10new',
    \ }

let g:go_test_prepend_name = 1
let g:go_list_type = "quickfix"
let g:go_auto_type_info = 0
let g:go_auto_sameids = 0

let g:go_autodetect_gopath = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_metalinter_enabled = ['vet', 'golint']

let g:go_highlight_space_tab_error = 0
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_trailing_whitespace_error = 0
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_gocode_propose_source = 1

" vim-hashicorp-tools

let g:terraform_align = 1
let g:terraform_fmt_on_save = 1
let g:terraform_fold_sections = 1

" vim-markdown

let g:markdown_conceal = 0
let g:markdown_fenced_languages = [
    \ 'go',
    \ 'sh',
    \]

" Section: Fin
